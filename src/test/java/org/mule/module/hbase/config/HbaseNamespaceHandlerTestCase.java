/**
 * Mule HBase Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */

package org.mule.module.hbase.config;

import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.RowLock;
import org.mule.api.MuleEvent;
import org.mule.construct.SimpleFlowConstruct;
import org.mule.module.hbase.api.HBaseService;
import org.mule.tck.FunctionalTestCase;

public class HbaseNamespaceHandlerTestCase extends FunctionalTestCase
{
    private HBaseService mockService;

    @Override
    protected String getConfigResources()
    {
        return "hbase-namespace-config.xml";
    }

    @Override
    protected void doSetUp() throws Exception
    {
        mockService = muleContext.getRegistry().lookupObject("mockFacade");
        reset(mockService);
    }

    public void testFlowGet() throws Exception
    {
        final Result mockResult = new Result();
        when(mockService.get(eq("t1"), eq("r1"), anyInt(), anyLong())).thenReturn(mockResult);

        final SimpleFlowConstruct flow = lookupFlowConstruct("flowGet");
        final MuleEvent event = getTestEvent(null);
        final MuleEvent responseEvent = flow.process(event);

        final Result response = responseEvent.getMessage().getPayload(Result.class);
        assertEquals(mockResult, response);
        verify(mockService).get(eq("t1"), eq("r1"), anyInt(), anyLong());
    }

    public void testFlowPut() throws Exception
    {
        final SimpleFlowConstruct flow = lookupFlowConstruct("flowPut");
        final MuleEvent event = getTestEvent(null);
        flow.process(event);

        verify(mockService).put(eq("t1"), eq("r1"), eq("f1"), eq("q1"), anyLong(), eq("v1"), anyBoolean(),
            any(RowLock.class));
    }

    private SimpleFlowConstruct lookupFlowConstruct(String name)
    {
        return (SimpleFlowConstruct) muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
